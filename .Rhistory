@
<<label=function_definitions, echo=False, include=False>>=
#Import the GAM library
library(mgcv)
#Backslash-escape special characters.
sanitize <- function(str)
gsub('([#$%&~_\\^\\\\{}])', '\\\\\\1', str, perl=TRUE)
#Double-backslash-escape special characters.
sanitize2 <- function(str)
gsub('([#$%&~_\\^\\\\{}])', '\\\\\\\\\\1', str, perl=TRUE)
#Paste together a list of strings, backslash-escaping special characters in each one.
sanipaste <- function(pastelist, ...)
paste(sanitize(pastelist), ...)
#Paste together a list of strings, double-backslash-escaping special characers in each one.
sanipaste2 <- function(pastelist, ...)
paste(sanitize2(pastelist), ...)
#Determine what proportion of loadings comes from each event class
proportions <- function(streams, target, col.names)
{
result = matrix( nrow=length(streams), ncol=length(col.names) )
for(i in 1:length(streams))
{
stream = get(streams[i])
result[i,] = sapply(c(TRUE, FALSE), function(x) sum(stream[stream$snow==x,target], na.rm=T) / sum(stream[,target], na.rm=T))
}
result = data.frame(result)
names(result) = col.names
row.names(result) = sapply(streams, function(x) get(x=x, pos=stream_names))
return(result)
}
#Determine what percentage of loadings comes from each event class
percentages <- function(streams, target, col.names, decimals=1)
{
props = proportions(streams, target, col.names)
result = matrix( nrow=0, ncol=length(col.names) )
rows = dim(props)[1]
for( row in 1:rows )
{
result = rbind( result, paste( ifelse(round(props[row,]*100, decimals)%%1 == 0,
paste(as.character( round(props[row,]*100, 0) ), ".0", sep=""),
as.character( round(props[row,]*100, decimals) )), "%", sep="" ))
}
result=data.frame(result)
names(result) = names(props)
row.names(result) = row.names(props)
return(result)
}
#Extracts the terms in the model formula.
parse_args <- function(model)
return(attr(model$model, 'names'))
#Compute the model's R**2.
r2 <- function(model)
{
actual = model$residual+model$fitted
rss = sum(model$residual**2)
tss = sum((actual-mean(actual))**2)
return(1 - rss/tss)
}
#Adds variables one-by-one to the model, finding the R^2 at each step.
r2_step <- function(model, variables, data)
{
output = attr(model$model, "names")[1]
call = paste(output, "~", variables[1], sep="")
r_square = vector()
for(variable in variables[-1]) {
f = as.formula(call)
model = lm(formula=f, data=data)
r_square = c(r_square, r2(model))
call = paste(call, "+", variable) }
model = update(model, formula=call)
r_square = c(r_square, r2(model))
return(r_square)
}
#This function uses the BIC to screen variables, returning the 'step' object.
stepwise_BIC <- function(target, data, sites)
{
predictors = c("num_events", "theisen", "p5max", "p10max", "p15max", "p30max", "p60max",
"ei", "duration", "ap_1day", "ap_3day", "ap_5day", "tmax", "tmean", "tmin",
"nws_prec", "nws_snow", "melt_snow", "cos_julian", "sin_julian", "antecedent_qbase",
"antecedent_tmean", "antecedent_tmax", "antecedent_trange")
d = data[,c(target, predictors)]
result = list()
full_model = as.formula( paste(target, "~", paste(predictors, collapse="+")) )
intercept_only = as.formula( paste(target, "~1") )
fm1 <- lm(full_model, data=d, x=T)
d = data.frame(cbind(target=fm1$fitted+fm1$residual, fm1$x))
names(d)[1] = target
fm2 <- lm(intercept_only, data=d)
screened = step(fm2, scope=full_model, direction='both', k=log(dim(d)[1]), trace=FALSE)
terms = parse_args(screened)
target = terms[1]
predictors = terms[-1]
formula = as.formula(paste(target, "~", paste(predictors, collapse="+")))
model = lm(formula, data=data, x=T)
#Put the results in a list object
result$site = sites[[as.character(unique(data$stream)[1])]]
result$model = model
result$ranked = names(model$model)[-1] # rank_predictors(model)
result$R2 = r2_step(model, result$ranked, data)
return(result)
}
#This function uses the BIC to screen variables, returning the 'step' object.
stepwise_BIC_gam <- function(target, data, sites)
{
predictors = c("num_events", "theisen", "p5max", "p10max", "p15max", "p30max", "p60max",
"ei", "duration", "ap_1day", "ap_3day", "ap_5day", "tmax", "tmean", "tmin",
"nws_prec", "nws_snow", "melt_snow", "cos_julian", "sin_julian", "antecedent_qbase",
"antecedent_tmean", "antecedent_tmax", "antecedent_trange")
d = data[,c(target, predictors)]
result = list()
full_model = as.formula( paste(target, "~", paste(predictors, collapse="+")) )
intercept_only = as.formula( paste(target, "~1") )
fm1 <- lm(full_model, data=d, x=T)
d = data.frame(cbind(target=fm1$fitted+fm1$residual, fm1$x))
names(d)[1] = target
fm2 <- gam(intercept_only, data=d)
screened = step(fm2, scope=full_model, direction='both', k=log(dim(d)[1]), trace=FALSE)
terms = parse_args(screened)
target = terms[1]
predictors = terms[-1]
formula = as.formula(paste(target, "~", paste(predictors, collapse="+")))
model = lm(formula, data=data, x=T)
#Put the results in a list object
result$site = sites[[as.character(unique(data$stream)[1])]]
result$model = model
result$ranked = names(model$model)[-1] # rank_predictors(model)
result$R2 = r2_step(model, result$ranked, data)
return(result)
}
#Use the BIC to screen the predictors that are available when snow is on the ground.
stepwise_BIC_snow <- function(target, data, sites)
{
predictors = c("num_days", "tmax", "tmean", "tmin", "nws_prec", "nws_snow",
"cos_julian", "sin_julian", "antecedent_qbase", "antecedent_tmean", "antecedent_tmax", "antecedent_trange")
d = data[,c(target, predictors)]
result = list()
full_model = as.formula( paste(target, "~", paste(predictors, collapse="+")) )
intercept_only = as.formula( paste(target, "~1") )
fm1 <- lm(full_model, data=d, x=T)
d = data.frame(cbind(target=fm1$fitted+fm1$residual, fm1$x))
names(d)[1] = target
fm2 <- lm(intercept_only, data=d)
screened = step(fm2, scope=full_model, direction='both', k=log(dim(d)[1]), trace=FALSE)
terms = parse_args(screened)
target = terms[1]
predictors = terms[-1]
formula = as.formula(paste(target, "~", paste(predictors, collapse="+")))
model = lm(formula, data=data, x=T)
#Put the results in a list object
result$site = sites[[as.character(unique(data$stream)[1])]]
result$model = model
result$ranked = names(model$model)[-1] #rank_predictors(model)
result$R2 = r2_step(model, result$ranked, data)
return(result)
}
#Use the BIC to screen the predictors that are available when snow is on the ground.
stepwise_BIC_snow2 <- function(target, data, sites)
{
predictors = c("num_days", "tmax", "tmean", "tmin", "nws_prec", "nws_snow", "total_water", "melt_water",
"cos_julian", "sin_julian", "antecedent_qbase", "antecedent_tmean", "antecedent_tmax", "antecedent_trange")
d = data[,c(target, predictors)]
result = list()
full_model = as.formula( paste(target, "~", paste(predictors, collapse="+")) )
intercept_only = as.formula( paste(target, "~1") )
fm1 <- lm(full_model, data=d, x=T)
d = data.frame(cbind(target=fm1$fitted+fm1$residual, fm1$x))
names(d)[1] = target
fm2 <- lm(intercept_only, data=d)
screened = step(fm2, scope=full_model, direction='both', k=log(dim(d)[1]), trace=FALSE)
terms = parse_args(screened)
target = terms[1]
predictors = terms[-1]
formula = as.formula(paste(target, "~", paste(predictors, collapse="+")))
model = lm(formula, data=data, x=T)
#Put the results in a list object
result$site = sites[[as.character(unique(data$stream)[1])]]
result$model = model
result$ranked = names(model$model)[-1] #rank_predictors(model)
result$R2 = r2_step(model, result$ranked, data)
return(result)
}
#Function to flag the largest observations of a certain variable.
major <- function(data, target, q=0.9, strata='')
{
#Flag the major events within each level of strata
if(strata != '') {
major = rep(0, length(data[,target]))
#Loop through the strata
for(stratum in unique(data[,strata])) {
indx = which(data[,strata]==stratum)
major[indx] = ifelse(data[indx,target] > quantile(data[indx,target], q, na.rm=TRUE), 1, 0) } }
#If no stratification is provided, then just flag the overall major events
else { major = ifelse(data[,target]>quantile(data[,target], q, na.rm=TRUE), 1, 0) }
#Either way, return the result
return(major)
}
#Produce a boxplot of the per-event loading, showing rainfall- and snowmelt-driven events separately.
bplot <- function(formula, data, loc, classes, site, ...)
{
boxplot(formula, data=data, bty='n', ylim=yy, cex=0.6, pch=4,
boxwex=0.4, frame.plot=F, ann=F, names=classes, add=T, at=loc:(loc+1), yaxt='n', ...)
mtext(site, side=1, line=3, at=(loc+0.5))
mtext( paste(round(100*sum(data[data$snow==1,]$ptot_tot)/sum(data$ptot_tot), 0), "%", sep=""), side=3, line=0, cex=0.7, at=loc )
mtext( paste(round(100*sum(data[data$snow==0,]$ptot_tot)/sum(data$ptot_tot), 0), "%", sep=""), side=3, line=0, cex=0.7, at=(loc+1) )
mtext(sum(data$snow), side=3, line=1, cex=0.7, at=loc )
mtext(length(data$snow) - sum(data$snow), side=3, line=1, cex=0.7, at=(loc+1) )
}
#Produce a table that shows how the R**2 grows as new variables are added to the model.
R2_table <- function(varlist)
{
numvars = length(varlist$R2)
cat(paste("\\multirow{", as.character(numvars+1), "}{*}{", varlist$site, "}", sep=""))
for(i in 1:numvars)
{
cat(paste(" & ", as.character(round(varlist$R2[i], 3)), " & ", sep=""))
for(j in 1:i)
{
cat(sanitize(varlist$ranked[j]))
if(j<i)
cat(" + ")
}
cat("\\\\ \n")
}
cat("\\vspace{2mm}\\\\ \n")
}
@
<<label=variable_selection_nosnow, echo=False, include=False>>=
es = stepwise_BIC(target="log_stot_tot", data=eagle_nosnow, sites=stream_names)
js = stepwise_BIC(target="log_stot_tot", data=joosvalley_nosnow, sites=stream_names)
os = stepwise_BIC(target="log_stot_tot", data=otter_nosnow, sites=stream_names)
bs = stepwise_BIC(target="log_stot_tot", data=brewery_nosnow, sites=stream_names)
gs = stepwise_BIC(target="log_stot_tot", data=garfoot_nosnow, sites=stream_names)
ks = stepwise_BIC(target="log_stot_tot", data=kuenster_nosnow, sites=stream_names)
rs = stepwise_BIC(target="log_stot_tot", data=rattlesnake_nosnow, sites=stream_names)
bows = stepwise_BIC(target="log_stot_tot", data=bower_nosnow, sites=stream_names)
ep = stepwise_BIC(target="log_ptot_tot", data=eagle_nosnow, sites=stream_names)
jp = stepwise_BIC(target="log_ptot_tot", data=joosvalley_nosnow, sites=stream_names)
op = stepwise_BIC(target="log_ptot_tot", data=otter_nosnow, sites=stream_names)
bp = stepwise_BIC(target="log_ptot_tot", data=brewery_nosnow, sites=stream_names)
gp = stepwise_BIC(target="log_ptot_tot", data=garfoot_nosnow, sites=stream_names)
kp = stepwise_BIC(target="log_ptot_tot", data=kuenster_nosnow, sites=stream_names)
rp = stepwise_BIC(target="log_ptot_tot", data=rattlesnake_nosnow, sites=stream_names)
bowp = stepwise_BIC(target="log_ptot_tot", data=bower_nosnow, sites=stream_names)
@
<<label=variable_selection_snow, include=False, echo=False>>=
es_snow = stepwise_BIC_snow(target="log_stot_tot", data=eagle_snow, sites=stream_names)
js_snow = stepwise_BIC_snow(target="log_stot_tot", data=joosvalley_snow, sites=stream_names)
os_snow = stepwise_BIC_snow(target="log_stot_tot", data=otter_snow, sites=stream_names)
bs_snow = stepwise_BIC_snow(target="log_stot_tot", data=brewery_snow, sites=stream_names)
gs_snow = stepwise_BIC_snow(target="log_stot_tot", data=garfoot_snow, sites=stream_names)
ks_snow = stepwise_BIC_snow(target="log_stot_tot", data=kuenster_snow, sites=stream_names)
rs_snow = stepwise_BIC_snow(target="log_stot_tot", data=rattlesnake_snow, sites=stream_names)
bows_snow = stepwise_BIC_snow(target="log_stot_tot", data=bower_snow, sites=stream_names)
ep_snow = stepwise_BIC_snow(target="log_ptot_tot", data=eagle_snow, sites=stream_names)
jp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=joosvalley_snow, sites=stream_names)
op_snow = stepwise_BIC_snow(target="log_ptot_tot", data=otter_snow, sites=stream_names)
bp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=brewery_snow, sites=stream_names)
gp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=garfoot_snow, sites=stream_names)
kp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=kuenster_snow, sites=stream_names)
rp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=rattlesnake_snow, sites=stream_names)
bowp_snow = stepwise_BIC_snow(target="log_ptot_tot", data=bower_snow, sites=stream_names)
@
<<label=variable_selection_snow2, include=False, echo=False>>=
es_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=eagle_snow, sites=stream_names)
js_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=joosvalley_snow, sites=stream_names)
os_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=otter_snow, sites=stream_names)
bs_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=brewery_snow, sites=stream_names)
gs_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=garfoot_snow, sites=stream_names)
ks_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=kuenster_snow, sites=stream_names)
rs_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=rattlesnake_snow, sites=stream_names)
bows_snow2 = stepwise_BIC_snow2(target="log_stot_tot", data=bower_snow, sites=stream_names)
ep_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=eagle_snow, sites=stream_names)
jp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=joosvalley_snow, sites=stream_names)
op_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=otter_snow, sites=stream_names)
bp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=brewery_snow, sites=stream_names)
gp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=garfoot_snow, sites=stream_names)
kp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=kuenster_snow, sites=stream_names)
rp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=rattlesnake_snow, sites=stream_names)
bowp_snow2 = stepwise_BIC_snow2(target="log_ptot_tot", data=bower_snow, sites=stream_names)
@
<<label=breakdown_snow_or_rain, include=False, echo=False>>=
for(target in c('ptot_tot', 'pstorm_tot', 'stot_tot', 'sstorm_tot'))
{
p = percentages(streams, target, col.names=c("snowmelt-driven", "rainfall-driven"))
pp = as.matrix( proportions(streams, target, col.names=c("snowmelt-driven", "rainfall-driven")) )
variable_name = paste(target, "_percentages", sep="")
variable_name2 = paste(target, "_proportions", sep="")
assign(variable_name, value=p)
assign(variable_name2, value=pp)
}
@
<<label=barchart, echo=False, include=False>>=
layout(matrix(1:4,2,2))
colors <- gray.colors(dim(ptot_tot_proportions)[1])
barplot(ptot_tot_proportions, beside=T, names.arg=c("snow","rain"), ylab="proportion of phosphorus")
barplot(stot_tot_proportions, beside=T, names.arg=c("snow","rain"), ylab="proportion of solids")
barplot(pstorm_tot_proportions, beside=T, names.arg=c("snow","rain"), ylab="proportion of phosphorus")
barplot(sstorm_tot_proportions, beside=T, names.arg=c("snow","rain"), ylab="proportion of solids")
legend(x="topleft", legend=streams, fill=colors, bty='n')
@
\begin{figure}[h!]
\begin{center}
<<label=fig2, fig=True, echo=False, width=6, height=8.5>>=
<<barchart>>
@
\end{center}
\vspace{-10mm}
\caption{Cumulative storm loadings at the four creeks.\label{bars}}
\end{figure}
<<label=stot_boxplots, echo=False, include=False>>=
yy = c(-2, 3.5)
xx = c(1, 3*length(streams) + 1)
par(mar=c(4, 4, 2, 0))
plot.new()
plot.window(xlim=xx, ylim=yy)
for(i in 1:length(streams))
{
data = get(streams[i])
site = stream_names[[streams[i]]]
bplot(log_stot_tot~snow, data=eagle, loc=3*i, classes=c("snow","rain"), site=site, xlim=xx)
}
mtext("count:", side=3, line=1, cex=0.7, at=0, adj=1 )
mtext("proportion:", side=3, line=0, cex=0.7, at=0, adj=1 )
@
<<label=ptot_boxplots, echo=False, include=False>>=
xx = c(1, 3*length(streams) + 1)
par(mar=c(4, 4, 2, 0))
plot.new()
plot.window(xlim=xx, ylim=yy)
for(i in 1:length(streams))
{
data = get(streams[i])
site = stream_names[[streams[i]]]
bplot(log_ptot_tot~snow, data=eagle, loc=3*i, classes=c("snow","rain"), site=site, xlim=xx)
}
mtext("count:", side=3, line=1, cex=0.7, at=0, adj=1 )
mtext("proportion:", side=3, line=0, cex=0.7, at=0, adj=1 )
@
%Boxplots of the contribution from individual storm events
\begin{figure}[h]
\setkeys{Gin}{width=1\textwidth}    %make figures a bit wider than the Sweave default.
\begin{center}
<<label=boxplot_stot, fig=True, echo=False, width=9, height=5>>=
<<stot_boxplots>>
@ \\
\vspace{15mm}
<<label=boxplot_ptot, fig=True, echo=False, width=9, height=5>>=
<<ptot_boxplots>>
@
\caption{Boxplots showing the sediment and phosphorus load produced by individual events at all four streams.\label{boxplots}}
\end{center}
\end{figure}
<<label=cumulative_sloading_by_rainfall, include=False, echo=False>>=
line_type=1
color=1
yy=c(0,1)
xx = c(0,max(aggregate[aggregate$snow==FALSE,]$theisen, na.rm=T))
for(stream in streams)
{
stream_data = get(stream)
non_snow = stream_data[stream_data$snow==FALSE & !is.na(stream_data$ptot_tot),]
non_snow_sorted = non_snow[ order(non_snow$theisen) ,]
y = cumsum(non_snow_sorted$stot_tot)/sum(stream_data$stot_tot, na.rm=T)
stream_data = get(stream)
plot( x=non_snow_sorted$theisen, y=y, type='l', xlab="Theisen rainfall",
ylab=paste('proportion of total sediment load'), lty=line_type, col=color, bty='n', lwd=2, ylim=yy, xlim=xx)
par(new=T, ann=F, xaxt='n', yaxt='n')
line_type = line_type+1
}
legend(x='topleft', bty='n', legend=streams, lty=1:length(streams))
@
<<label=cumulative_ploading_by_rainfall, include=False, echo=False>>=
line_type=1
color=1
yy=c(0,1)
xx = c(0,max(aggregate[aggregate$snow==FALSE,]$theisen, na.rm=T))
for(stream in streams)
{
stream_data = get(stream)
non_snow = stream_data[stream_data$snow==FALSE & !is.na(stream_data$ptot_tot) & !is.na(stream_data$theisen),]
non_snow_sorted = non_snow[ order(non_snow$theisen) ,]
y = cumsum(non_snow_sorted$ptot_tot)/sum(stream_data$ptot_tot, na.rm=T)
stream_data = get(stream)
plot( x=non_snow_sorted$theisen, y=y, type='l', xlab="Theisen rainfall",
ylab=paste('proportion of total phosphorus load'), lty=line_type, col=color, bty='n', lwd=2, ylim=yy, xlim=xx)
par(new=T, ann=F, xaxt='n', yaxt='n')
line_type = line_type+1
}
legend(x='topleft', bty='n', legend=streams, lty=1:length(streams))
@
<<label=cdf_plot, include=False, echo=False>>=
line_type=1
color=1
for(stream in streams)
{
stream_data = get(stream)
plot( y=cumsum(sort(stream_data[,'sstorm_tot'], decreasing=T)) / sum(stream_data[,'sstorm_tot']),
x=1:length(stream_data[,'sstorm_tot']) / length(stream_data[,'sstorm_tot']), type='l',
xlab='fraction of events', ylab='fraction of loading', lty=line_type, col=color, bty='n', lwd=2)
par(new=T, ann=F, xaxt='n', yaxt='n')
line_type = line_type+1
}
legend(x='bottomright', bty='n', legend=streams, lty=c(1,2,3,4))
@
<<label=proportion, include=False, echo=False>>=
q_90 = list()
for(target in c("stot_tot", "ptot_tot"))
{
output = paste(target, "_major", sep="")
q=vector()
for(stream_name in streams){
stream = get(stream_name)
stream[output] <- with(stream, ifelse(get(target)>quantile(get(target), 0.9, na.rm=T),1,0))
stream$major <- with(stream, ifelse(get(target)>quantile(get(target), 0.9, na.rm=T),1,0))
proportion = sum(stream[stream[output]==1,target], na.rm=T)/sum(stream[,target], na.rm=T)
q = c(q, proportion)
assign(stream_name, stream) }
names(q) = streams
q_90[[target]] = q
}
@
major
eagle$major
which(eagle$major==1)
eagle[which(eagle$major==1),'year']
sum(eagle$major)
eagle[which(eagle$major==1),'month']
count(eagle$year)
sum(eagle$year==2006)
sum(eagle$year==2007)
sum(eagle$year==2004)
sum(eagle$year==2005)
sum(eagle[which(eagle$major==1),'year']==1993)
sum(eagle[which(eagle$major==1),'year']==1994)
sum(eagle[which(eagle$major==1),'year']==1995)
sum(eagle[which(eagle$major==1),'year']==1991)
sum(eagle[which(eagle$major==1),'year']==1992)
sum(eagle[which(eagle$major==1),'year']==2003)
sum(eagle[which(eagle$major==1),'year']==2004)
sum(eagle[which(eagle$major==1),'year']==2005)
sum(eagle[which(eagle$major==1),'year']==2006)
sum(eagle[which(eagle$major==1),'year']==2007)
proportions
eagle1993 = eagle[eagle$year==1993, ]
proportions(c("eagle1993"), "stot_tot", col.names=c("snowmelt-driven", "rainfall-driven"))
eagle1993
proportions(c("eagle1993"), "stot_tot", col.names=c("snowmelt-driven", "rainfall-driven"))
proportions
stream_names
stream_names$eagle1993 = "Eagle"
proportions(c("eagle1993"), "stot_tot", col.names=c("snowmelt-driven", "rainfall-driven"))
stream_names$eagle1993 = "Eagle, 1993"
proportions(c("eagle1993"), "stot_tot", col.names=c("snowmelt-driven", "rainfall-driven"))
proportions(c("eagle1993"), "stot_tot", col.names=c("snowmelt-driven", "rainfall-driven"))bwer$major
bower$major
bower[bower$major==1, "year"]
sum(bower$year==1991)
sum(bower$year==1992)
sum(bower$year==1993)
sum(bower$year==1994)
sum(bower$year==2006)
sum(bower$year==2007)
sum(bower$year==2008)
sum(bower$year==2009)
sum(eagle$year==2006)
sum(eagle$year==2009)
sum(eagle$year==2007)
sum(eagle$year==2005)
?dirichlet
?rdirichlet
?range
compilePdf("~/git/loadings/writeup/loadings.Rnw")
compilePdf("~/git/loadings/writeup/loadings.Rnw")
compilePdf("~/git/loadings/writeup/loadings.Rnw")
compilePdf("~/git/loadings/writeup/loadings.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
compilePdf("~/git/qpcr/project/writeup.Rnw")
install.pacakges("Sweave")
install.packages("Sweave")
install.packages("mgcv")
install.packages("Sweave")
?Sweave
install.packages("pls")
install.packages("gbm")
install.packages("mgcv")
install.packages("knitr")
install.packages("censReg")
install.packages("lars")
install.packages("glmnet")
install.packages("maptools")
install.packages("maps")
symbols(1:10,rep(1,10),circles=1:10,inches=0.1)
symbols(1:10,rep(1,10),circles=21:30,inches=0.1)
symbols(1:10,rep(1,10),circles=51:60,inches=0.1)
?symbols
symbols(1:10,rep(1,10),circles=1:10,inches=0.1)
symbols(1:10,rep(1,10),circles=21:30,inches=0.1)
symbols(1:10,rep(1,10),circles=51:60,inches=0.6)
symbols(1:10,rep(1,10),circles=1:10,inches=0.5)
symbols(1:10,rep(1,10),circles=21:30,inches=0.3)
symbols(1:10,rep(1,10),circles=51:60,inches=0.6)
symbols(1:10,rep(1,10),circles=1:10,inches=0.1)
symbols(1:10,rep(1,10),circles=21:30,inches=0.3)
symbols(1:10,rep(1,10),circles=51:60,inches=0.6)
